package codingInterviews;
/**
 * 请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。
 * 例如把9表示成二进制是1001；有2位是1，因此如果输入9，函数输出2.
 */
public class Numberof1sinBinary {
	public static int numbercount(int n) {
		int count = 0;
		while(n!=0) {
			count++;
			n = (n-1)&n;
		}
		return count;
	}
	public static void main(String args[]) {
		System.out.println(numbercount(9));
	}
}
/**
 * 我们就可以看出，每次在最右的1设置一个flag的话，
 * 当它(i)与它前一位(i-1)进行&操作时，对flag左边的1是没有影响的，
 * 每次得到的结果，就会将flag位置及右边所有的数置为0.
 * 例如：11010&11001 ==11000(24)*/
/**
 * 如果一个整数不是等于0，那么该整数的二进制里面至少有一位是1，先假设这个数最右边一位是1
 * 那么减去1时，最后一位变成了0，而且其他所有未都保持不变，也就是相当于最后一位进行了取反操作1变成了0
 * 接下来假设一个整数最后一位是0，那么如果二进制表示的最右边1位是在第m位，那么减去1时，第m位1变成0，
 * 第m位之后的0全变成1，整数中第m位之前的都保持不变。
 * 分析前面这两种情况，我们发现把一个整数减去1都是阿布最右边的1变成0，如果右边还有0的话所有的0变成1，而他左边的所有位都保持不变
 * 接下来我们把一个整数和他减去1的结果做位运算，相当于把他最右边的1变成0，
 * 总结一下就是：把一个整数减去1，在和原来的数字做与运算，会把该整数最右边的1变成0，那么一个整数的二进制书中1的个数就可以这样进行计算。
 */
 